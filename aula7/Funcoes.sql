CREATE TABLE IF NOT EXISTS au7.time (
id INTEGER PRIMARY KEY,
nome VARCHAR(50)
);
CREATE TABLE IF NOT EXISTS au7.partida (
id INTEGER PRIMARY KEY,
time_1 INTEGER,
time_2 INTEGER,
time_1_gols INTEGER,
time_2_gols INTEGER,
FOREIGN KEY(time_1) REFERENCES au7.time(id),
FOREIGN KEY(time_2) REFERENCES au7.time(id)
);
INSERT INTO au7.time(id, nome) VALUES
(1,'CORINTHIANS'),
(2,'SÃO PAULO'),
(3,'CRUZEIRO'),
(4,'ATLETICO MINEIRO'),
(5,'PALMEIRAS');
INSERT INTO au7.partida(id, time_1, time_2, time_1_gols, time_2_gols)
VALUES
(1,4,1,0,4),
(2,3,2,0,1),
(3,1,3,3,0),
(4,3,4,0,1),
(5,1,2,0,0),
(6,2,4,2,2),
(7,1,5,1,2),
(8,5,2,1,2);

-- FUNÇÃO SÃO BLOCOS DE CÓDIGO QUE PODE 
-- EXECUTAR UMA TAREFA ESPECÍFICA.
-- AS FUNÇÕES ACEITAM PARÂMETROS, PODEM SER FEFINIDAS
-- PELO USUÁRIO OU PODEM SER CHAMADAS AS FUNÇÕES EMBUTIDAS (DO PRÓPRIO SGBD)
-- SÃO 3 TIPOS DE FUNÇÕES: MATEMÁTICAS, AS DATAS E AS DE STRING
-- FUNÇÕES MATEMÁTICAS: 

-- Funções matemáticas
-- Exemplos:
SELECT ABS(-10) -- RETORNA O VALOR ABSOLUTO DO NÚMERO
SELECT ROUND(10.2); -- ARREDONDA PARA O MAIS PRÓXIMO
SELECT TRUNC(12.9654756,1); -- PEGA O INTEIRO
SELECT CEIL(12.1654756); -- ARREDONDA PRA CIMA
SELECT TRUNC(12.9654756); -- ARREDONDA PRA BAIXO
SELECT POWER(2,3); -- RETORNA OS VALORES EXPONENCIAL
SELECT LN(4); -- RETORNA O LOGARÍTIMO DO NÚMERO
SELECT COS(30); -- RETORNA O COSSENO DO NÚMERO
SELECT ATAN(0.5); -- RETORNA O ARCO DA TANGENTE
SELECT ASINH(0.5); -- RETORNA O ARCO DO SENO HIPERBÓLICO
SELECT SIGN(-50); -- RETORNA O SINAL DO NÚMERO

SELECT CONCAT('Will','danthê'); -- CONCATENA AS STRINGS
SELECT length('Willdanthê'); -- RETORNA O COMPRIMENTO
SELECT LOWER("WILLDANTHÊ"); -- DEIXA MINÚSCULO
SELECT UPPER("willdanthê"); -- DEIXA MAIÚSCULO
SELECT ltrim('  sacadasasd'); -- Tira o espaço da esquerda
SELECT rtrim('sacadasasd  '); -- Tira o espaço da direita
SELECT LPAD('MENU ',10, '*'); -- PREENCHE O TEXTO CO A QUANTIDADE E O TIPO NA ESQUERDA
SELECT LPAD('MENU ',10, '*'); -- PREENCHE O TEXTO COM A QUANTIDADE E O TIPO NA DIREITA
SELECT REVERSE('SUBINONIBUS'); -- INVERTE A STRING

-- FUNÇÕES DA DATA
SELECT CURRENT_DATE; -- DATA ATUAL
SELECT AGE('2025-02-12','2004-08-27');

SELECT EXTRACT(YEAR FROM AGE('2025-02-12','2004-08-27')); -- EXTRAI O ANO, DIA OU MêS
SELECT INTERVAL '1 DAY';
SELECT NOW();

-- Função definida pelo usuário:
CREATE FUNCTION SOMA(A INTEGER,B INTEGER) RETURNS INTEGER AS 
$$
    BEGIN
        -- CORPO DA FUNÇÃO
        RETURN A+B;
    END;
$$ LANGUAGE PLPGSQL;

SELECT SOMA(11,11);

-- OPERAÇÃO DE INSER NAS FUNÇÕES
CREATE OR REPLACE FUNCTION AU8.INSERE_PARTIDA(ID INTEGER,TIME_1 INTEGER, TIME_2 INTEGER, TIME_1_GOLS INTEGER, TIME_2_GOLS INTEGER) RETURNS VOID AS
$$
    BEGIN
        INSERT INTO AU8.PARTIDA(id, time_1, time_2, time_1_gols, time_2_gols)
        VALUES (id, time_1, time_2, time_1_gols, time_2_gols);
    END;
$$ LANGUAGE PLPGSQL;

SELECT AU8.insere_partida(9,1,2,4,2);

-- SELECT * FROM AU8.vpartida_classificavao;

CREATE OR REPLACE FUNCTION consulta_times() RETURNS TABLE(nome VARCHAR) AS
$$
    BEGIN
        RETURN QUERY SELECT NOME FROM au7.time;
    END;
$$ LANGUAGE PLPGSQL;

CREATE OR REPLACE FUNCTION consulta_timeS() RETURNS SETOF AU8.TIME AS -- SETOF INDICA QUE A FUNÇÃO RETORNA UM CONJUNTO DE REGISTROS
$$
    BEGIN
        RETURN QUERY SELECT NOME FROM AU8.TIME;
    END;
$$ LANGUAGE PLPGSQL;


SELECT consulta_times();

CREATE OR REPLACE FUNCTION CONSULTA_VENEDOR_POR_TIME(ID_TIME INTEGER) RETURNS VARCHAR(50) AS
$$
    DECLARE
        VENCEDOR VARCHAR(50);
    BEGIN
        SELECT CASE
            WHEN TIME_1_GOLS > TIME_2_GOLS THEN (SELECT NOME FROM AU8.TIME WHERE ID = TIME_1)
            WHEN TIME_1_GOLS < TIME_2_GOLS THEN (SELECT NOME FROM AU8.TIME WHERE ID = TIME_2)
        ELSE 'EMPATE'
    END INTO VENCEDOR
    FROM AU8.partida
    WHERE TIME_1 = ID_TIME OR TIME_2 = ID_TIME;
    RETURN VENCEDOR;
    END;
$$ LANGUAGE PLPGSQL;

SELECT consulta_venedor_por_time(1);