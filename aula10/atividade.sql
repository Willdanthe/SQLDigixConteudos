CREATE TABLE IF NOT EXISTS  a10.Maquina (
 Id_Maquina INT PRIMARY KEY NOT NULL,
 Tipo VARCHAR(255),
 Velocidade INT,
 HardDisk INT,
 Placa_Rede INT,
 Memoria_Ram INT,
 Fk_Usuario INT,
 FOREIGN KEY(Fk_Usuario) REFERENCES a10.Usuarios(ID_Usuario)
);
CREATE TABLE IF NOT EXISTS  a10.Usuarios (
 ID_Usuario INT PRIMARY KEY NOT NULL,
 Password VARCHAR(255),
 Nome_Usuario VARCHAR(255),
 Ramal INT,
 Especialidade VARCHAR(255)
);
CREATE TABLE IF NOT EXISTS  a10.Software (
 Id_Software INT PRIMARY KEY NOT NULL,
 Produto VARCHAR(255),
 HardDisk INT,
 Memoria_Ram INT,
 Fk_Maquina INT,
 FOREIGN KEY(Fk_Maquina) REFERENCES a10.Maquina(Id_Maquina)
);
insert into a10.Maquina values (1, 'Desktop', 2, 500, 1, 4, 1);
insert into a10.Maquina values (2, 'Notebook', 1, 250, 1, 2, 2);
insert into a10.Maquina values (3, 'Desktop', 3, 1000, 1, 8, 3);
insert into a10.Maquina values (4, 'Notebook', 2, 500, 1, 4, 4);
insert into a10.Usuarios values (1, '123', 'Joao', 123, 'TI');
insert into a10.Usuarios values (2, '456', 'Maria', 456, 'RH');
insert into a10.Usuarios values (3, '789', 'Jose', 789, 'Financeiro');
insert into a10.Usuarios values (4, '101', 'Ana', 101, 'TI');
insert into a10.Software values (1, 'Windows', 100, 2, 1);
insert into a10.Software values (2, 'Linux', 50, 1, 2);
insert into a10.Software values (3, 'Windows', 200, 4, 3);
insert into a10.Software values (4, 'Linux', 100, 2, 4);

CREATE TABLE IF NOT EXISTS A10.LOG_MAQUINA(
    ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ID_MAQUINA INT,
    ACAO VARCHAR(50),
    DATA TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS A10.LOG_USUARIOS(
    ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ID_USUARIO INT,
    ACAO VARCHAR(50),
    DATA TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS A10.CONTAGEM_MAQUINA_SOFTWARES(
    ID INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ID_MAQUINA INT,
    QNT_SOFTWARES INT,
    DATA TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- =======(Atividades)=======

-- 1) CRIAR UM TRIGGER PARA AUDITORIA DE EXCLUSÃO DE MÁQUINAS:
-- CRIAR UM TRIGGER QUE REGISTRE QUANDO UM REGISTRO 
-- DA TABELA MAQUINA FOR EXCLUIDO

CREATE OR replace FUNCTION A10.LOG_EXCLUSAO_MAQUINA()
RETURNS TRIGGER AS $$
BEGIN
    -- OLD é para pegar o vlor antigo da linha que foi excluída
    INSERT INTO A10.LOG_MAQUINA(ID_MAQUINA, ACAO) VALUES (OLD.id_maquina, 'DELETE');
    RETURN OLD; -- o retorno pode ser old, new ou null, dependendo do que você quer fazer
    -- OLD É O VALOR ANTIGO DA LINHA QUE FOI EXCLUÍDA
    -- NEW É O VALOR NOVO DA LINHA QUE FOI INSERIDA
    -- NULL É PARA NÃO FAZER NADA
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER LOG_EXCLUSAO_MAQUINA
AFTER DELETE ON A10.maquina
FOR EACH ROW
EXECUTE FUNCTION A10.LOG_EXCLUSAO_MAQUINA();

insert into a10.Maquina values (5, 'Notebook', 2, 500, 1, 4, 4);
DELETE FROM A10.maquina WHERE id_maquina = 5;
SELECT * FROM A10.log_maquina;

-- 2) CRIAR UM TRIGGER PARA EVITAR SENHAS FRACAS:
-- CRIAR UM BEFORE INSERT TRIGGER PARA IMPEDIR QUE
-- UM USUÁRIO SEJA CADASTRADO COM UMA SENHA MENOR QUE 6 CARACTERES

CREATE OR REPLACE FUNCTION A10.STRONG_PASSWORD()
RETURNS TRIGGER AS $$
BEGIN
    IF length(NEW.PASSWORD) < 6 THEN
        RAISE EXCEPTION 'Your password is too weak. MUST BE > 6 length';
    ELSE
        RETURN NEW;
    END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER STRONG_PASSWORD
BEFORE INSERT ON A10.usuarios
FOR EACH ROW
EXECUTE FUNCTION A10.STRONG_PASSWORD();

insert into a10.Usuarios values (5, '101', 'Pedrinho', 101, 'TI');
SELECT * from a10.usuarios;

-- 3) CRIAR UM TRIGGER PARA ATUALIZAR CONTAGEM DE SOFTWARE
-- EM CADA MÁQUINA: CRIAR UM AFTER INSERT TRIGGER QUE
-- ATUALIZA UMA TABELA AUXILIAR MAQUINA_SOFTWARE_COUNT QUE
-- ARMAZENA A QUANTIDADE DE SOFTWARES INSTALADOS EM CADA MÁQUINA

CREATE OR REPLACE FUNCTION A10.CONTAGEM_MAQUINA_SOFTWARESF()
RETURNS TRIGGER AS $$
BEGIN
    IF EXISTS (SELECT 1 FROM A10.contagem_maquina_softwares WHERE ID_MAQUINA = NEW.FK_MAQUINA) THEN
        UPDATE A10.contagem_maquina_softwares SET qnt_softwares = qnt_softwares + 1, DATA = current_timestamp
        WHERE id_maquina = NEW.FK_MAQUINA;
    ELSE INSERT INTO A10.contagem_maquina_softwares(ID_MAQUINA, QNT_SOFTWARES, DATA) VALUES (NEW.FK_MAQUINA,1,current_timestamp);
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

insert into a10.Software values (7, 'Windows', 100, 2, 4);

SELECT * FROM A10.contagem_maquina_softwares;

CREATE OR REPLACE FUNCTION A10.ATUALIZAR_CONTAGEM_SOFTWARES()
RETURNS TRIGGER AS $$
BEGIN
    -- Se já existe um registro para a máquina, apenas incrementa a contagem
    IF EXISTS (
        SELECT 1 FROM A10.CONTAGEM_MAQUINA_SOFTWARES 
        WHERE ID_MAQUINA = NEW.Fk_Maquina
    ) THEN
        UPDATE A10.CONTAGEM_MAQUINA_SOFTWARES
        SET QNT_SOFTWARES = QNT_SOFTWARES + 1,
            DATA = CURRENT_TIMESTAMP
        WHERE ID_MAQUINA = NEW.Fk_Maquina;
    ELSE
        -- Se não existe um registro, insere um novo com QNT_SOFTWARES = 1
        INSERT INTO A10.CONTAGEM_MAQUINA_SOFTWARES (ID_MAQUINA, QNT_SOFTWARES, DATA)
        VALUES (NEW.Fk_Maquina, 1, CURRENT_TIMESTAMP);
    END IF;

    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

-- Criando o Trigger para atualizar a contagem de softwares
CREATE TRIGGER ATUALIZAR_CONTAGEM_SOFTWARES
AFTER INSERT ON A10.Software
FOR EACH ROW
EXECUTE FUNCTION A10.CONTAGEM_MAQUINA_SOFTWARESF();






-- 4) CRIAR UM TRIGGER PARA EVITAR A REMOÇÃO DE USUÁRIOS DO SETOR DE TI:
-- OBJETIVO -> IMPEDIR A REMOÇÃO DO USUÁRIOS CUJA ESPECIALIDADE SEJA 'TI'
CREATE OR REPLACE FUNCTION A10.CANT_STOP()
RETURNS TRIGGER AS $$
BEGIN
    IF (OLD.ESPECIALIDADE = 'TI') THEN
        RAISE EXCEPTION 'Usuários de TI não podem ser excluídos!';
    ELSE
        RETURN OLD;
    END IF;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER CANT_STOP
BEFORE DELETE ON A10.usuarios
FOR EACH ROW
EXECUTE FUNCTION A10.cant_stop();

DELETE FROM A10.usuarios WHERE id_usuario = 4;


-- 5) CRIAR UM TRIGGER PARA CALCULAR O USO TOTAL DE MEMÓRIAS POR MÁQUINA:
-- CRIAR UM AFTER INSERT E AFTER DELETE TRIGGER QUE CALCULA A QUANTIDADE TOTAL 
-- DE MEMÓRIA RAM OCUPADA PELOS SOFTWARES EM CADA MÁQUINA.

CREATE OR REPLACE FUNCTION A10.ATUALIZAR_MEMRIA_RAM()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE A10.maquina
    SET MEMORIA_RAM = (
        SELECT COALESCE(SUM(MEMORIA_RAM),0) FROM A10.software
        WHERE fk_maquina = COALESCE(NEW.FK_MAQUINA, OLD.FK_MAQUINA)
    )
    WHERE ID_MAQUINA = COALESCE(NEW.FK_MAQUINA, OLD.FK_MAQUINA);
    RETURN NEW;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER ATUALIZAR_MEMRIA_RAM
AFTER INSERT OR DELETE ON A10.software
FOR EACH ROW
EXECUTE FUNCTION A10.ATUALIZAR_MEMRIA_RAM();

insert into a10.Software values (5, 'Windows', 200, 4, 3);


-- 6) CRIAR UM TRIGGER PARA REGISTRAR ALTERAÇÕES DE ESPECIALIDADE EM USUÁRIOS:
-- CRIAR UM TRIGGER QUE REGISTRE AS MUDANÇAS DE ESPECIALIDADE DOS USUÁRIOS NA 
-- TABELA DE USUÁRIOS
CREATE OR REPLACE FUNCTION a10.ALTERACAO_ESPECIALIDADE()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO A10.LOG_USUARIOS(id_usuario, ACAO)
    VALUES (OLD.id_usuario, 'ALTERAÇÃO ESPECILIDADE');
    RETURN OLD;
END;
$$ LANGUAGE PLPGSQL;

CREATE TRIGGER ALTERACAO_ESPECIALIDADE
AFTER UPDATE ON A10.usuarios
FOR EACH ROW
EXECUTE FUNCTION A10.alteracao_especialidade();

-- DROP TRIGGER ALTERACAO_ESPECIALIDADE ON A10.usuarios;

UPDATE A10.usuarios SET ESPECIALIDADE = 'RH' WHERE ID_USUARIO = 5; 

SELECT * FROM A10.usuarios;
SELECT * FROM A10.LOG_usuarios;


-- 7) CRIAR UM TRIGGER PARA IMPEDIR EXCLUSÃO DE SOFTWARES ESSENCIAIS: 
-- CRIAR UM BEFORE DELETE TRIGGER QUE IMPEÇA A EXCLUSÃO DE SOFTWARES
-- CONSIDERADOS ESSENCIAIS (EX: WINDOWS)
CREATE OR REPLACE FUNCTION A10.IMPEDIMENTO_EXCLUSAO()
RETURNS TRIGGER AS $$
DECLARE
    MVS VARCHAR(255)[] := ARRAY['Windows','Linux'];  -- Most Valious Software
BEGIN
        IF (OLD.PRODUTO = any(MVS)) THEN
            RAISE EXCEPTION 'Este software não pode ser excluido devido a sua essencialidade!';
    END IF;
    RETURN OLD;
END;
$$ LANGUAGE PLPGSQL;


CREATE TRIGGER IMPEDIMENTO_EXCLUSAO
BEFORE DELETE ON A10.software
FOR EACH ROW
EXECUTE FUNCTION A10.IMPEDIMENTO_EXCLUSAO();

DELETE FROM A10.software WHERE ID_SOFTWARE = 2;


