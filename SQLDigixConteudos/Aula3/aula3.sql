CREATE TABLE IF NOT EXISTS AULA0302.EMPREGADO(
    NOME VARCHAR(50) NOT NULL,
    CPF VARCHAR(11) NOT NULL CHECK(LENGTH(CPF) = 11) PRIMARY KEY,
    ENDERECO VARCHAR(60) ,
    DATANASC DATE ,
    SEXO CHAR(1) NOT NULL CHECK (SEXO IN('M','F')),
    CARTTRAB VARCHAR(15),
    SALARIO DECIMAL(6,2),
    NUMDEP INT,
    CPFSUPER VARCHAR(11)
    
    -- CONSTRAINT gerente_empregado FOREIGN KEY(CPFSUPER) REFERENCES AULA0302.EMPREGADO(CPF) ON DELETE CASCADE,
    -- CONSTRAINT numero_departamento FOREIGN KEY(NUMDEP) REFERENCES AULA0302.DEPARTAMENTO(NUMDEP) ON DELETE CASCADE
);


CREATE TABLE IF NOT EXISTS AULA0302.DEPARTAMENTO(
    NUMDEP INT PRIMARY KEY,
    NOMEDEP VARCHAR(50),
    CPFGER VARCHAR(11),
    DARAINICIOGER DATE

    -- CONSTRAINT gerente_do_departamento FOREIGN KEY(CPFGER) REFERENCES AULA0302.EMPREGADO(CPF) ON DELETE CASCADE

);


ALTER TABLE AULA0302.EMPREGADO ADD CONSTRAINT gerente_empregado FOREIGN KEY(NUMDEP) REFERENCES AULA0302.DEPARTAMENTO(NUMDEP) ON DELETE CASCADE;

-- ALTER TABLE AULA0302.EMPREGADO DROP CONSTRAINT gerente_empregado;

ALTER TABLE AULA0302.EMPREGADO ADD CONSTRAINT numero_departamento FOREIGN KEY(CPFSUPER) REFERENCES AULA0302.EMPREGADO(CPF) ON DELETE CASCADE;

-- ALTER TABLE AULA0302.EMPREGADO DROP CONSTRAINT numero_departamento;

ALTER TABLE AULA0302.DEPARTAMENTO ADD CONSTRAINT gerente_do_departamento FOREIGN KEY(CPFGER) REFERENCES AULA0302.EMPREGADO(CPF) ON DELETE CASCADE;

CREATE TABLE IF NOT EXISTS AULA0302.PROJETO(
    NOMEPROJ VARCHAR(30),
    NUMPROJ INT PRIMARY KEY,
    LOCALIZACAO VARCHAR(50),
    NUMD INT

    -- CONSTRAINT projeto_do_departamento FOREIGN KEY(NUMD) REFERENCES AULA0302.DEPARTAMENTO(NUMDEP) ON DELETE CASCADE
);

ALTER TABLE AULA0302.PROJETO ADD CONSTRAINT projeto_do_departamento FOREIGN KEY(NUMD) REFERENCES AULA0302.DEPARTAMENTO(NUMDEP) ON DELETE CASCADE;



CREATE TABLE IF NOT EXISTS AULA0302.DEPENDENTE(
    ID_DEPENDENDTE INT PRIMARY KEY,
    CPFE VARCHAR(11),
    NOMEDEP VARCHAR(30) NOT NULL,
    SEXO CHAR(1) CHECK (SEXO IN('M','F')),
    PARENTESCO VARCHAR(15)

    -- CONSTRAINT empregado_dependente FOREIGN KEY(CPFE) REFERENCES AULA0302.EMPREGADO(CPF) ON DELETE CASCADE
);
ALTER TABLE AULA0302.DEPENDENTE ADD CONSTRAINT empregado_dependente FOREIGN KEY(CPFE) REFERENCES AULA0302.EMPREGADO(CPF) ON DELETE CASCADE;

CREATE TABLE IF NOT EXISTS AULA0302.TRABALHAEM(
    CPFE VARCHAR(11),
    NUMPROJ INT,
    HORAS DECIMAL(3,1) 

    -- CONSTRAINT empregado_trabalha FOREIGN KEY(CPFE) REFERENCES AULA0302.EMPREGADO(CPF) ON DELETE CASCADE,
    -- CONSTRAINT projeto_trabalhado FOREIGN KEY(NUMPROJ) REFERENCES AULA0302.PROJETO(NUMPROJ) ON DELETE CASCADE
);

ALTER TABLE AULA0302.TRABALHAEM ADD CONSTRAINT empregado_trabalha FOREIGN KEY(CPFE) REFERENCES AULA0302.EMPREGADO(CPF) ON DELETE CASCADE;

ALTER TABLE AULA0302.TRABALHAEM ADD CONSTRAINT projeto_trabalhado FOREIGN KEY(NUMPROJ) REFERENCES AULA0302.PROJETO(NUMPROJ) ON DELETE CASCADE;



DELETE FROM AULA0302.EMPREGADO;
DELETE FROM AULA0302.DEPARTAMENTO;
DELETE FROM AULA0302.DEPENDENTE;
DELETE FROM AULA0302.TRABALHAEM;
DELETE FROM AULA0302.PROJETO;

DROP TABLE AULA0302.EMPREGADO;
DROP TABLE AULA0302.DEPARTAMENTO;
DROP TABLE AULA0302.DEPENDENTE;
DROP TABLE AULA0302.TRABALHAEM;
DROP TABLE AULA0302.PROJETO;

SELECT * FROM AULA0302.departamento;


DROP TABLE IF EXISTS AULA0302.TRABALHAEM CASCADE;
DROP TABLE IF EXISTS AULA0302.DEPENDENTE CASCADE;
DROP TABLE IF EXISTS AULA0302.PROJETO CASCADE;
DROP TABLE IF EXISTS AULA0302.EMPREGADO CASCADE;
DROP TABLE IF EXISTS AULA0302.DEPARTAMENTO CASCADE;


-- INSRIR OS DADOS

INSERT INTO AULA0302.DEPARTAMENTO VALUES (1,'dep',null,'1990-01-01');
INSERT INTO AULA0302.DEPARTAMENTO VALUES (2,'dep2',null,'1990-01-01');
INSERT INTO AULA0302.DEPARTAMENTO VALUES (3,'dep3',null,'1990-01-01');

INSERT INTO AULA0302.EMPREGADO VALUES ('Joao','12345678911','rua1','1990-10-01','M','123',1000,1,null);
INSERT INTO AULA0302.EMPREGADO VALUES ('Maria','45678912345','rua3','1990-10-01','F','456',2000,2,null);
INSERT INTO AULA0302.EMPREGADO VALUES ('Jose','78912345678','rua2','1990-10-01','M','789',3000,2,NULL);

-- FAZER UPDATES PARA ATUALIZAR O CPFGER DOS DEPARTAMENTOS

UPDATE AULA0302.DEPARTAMENTO SET cpfger = '12345678911' WHERE NUMDEP = 1;
UPDATE AULA0302.DEPARTAMENTO SET cpfger = '45678912345' WHERE NUMDEP = 2;
UPDATE AULA0302.DEPARTAMENTO SET cpfger = '78912345678' WHERE NUMDEP = 3;

INSERT INTO AULA0302.PROJETO VALUES ('PROJ1',1,'LOCAL1',1);
INSERT INTO AULA0302.PROJETO VALUES ('PROJ2',2,'LOCAL2',2);
INSERT INTO AULA0302.PROJETO VALUES ('PROJ3',3,'LOCAL3',3);

INSERT INTO AULA0302.DEPENDENTE VALUES (1, '12345678911', 'DEP1', 'M', 'FILHO');
INSERT INTO AULA0302.DEPENDENTE VALUES (2, '45678912345', 'DEP2', 'F', 'FILHA');
INSERT INTO AULA0302.DEPENDENTE VALUES (3, '78912345678', 'DEP3', 'M', 'FILHO');

INSERT INTO AULA0302.TRABALHAEM VALUES ('12345678911',1,40);
INSERT INTO AULA0302.TRABALHAEM VALUES ('45678912345',2,40);
INSERT INTO AULA0302.TRABALHAEM VALUES ('78912345678',3,40);


-- CONSULTA DE TUDO

SELECT * FROM AULA0302.trabalhaem, AULA0302.departamento, AULA0302.dependente, AULA0302.projeto, AULA0302.empregado;

-- SUBSTRING, COM COMPOSIÇÕES EPECÍFICAS DE CARACTERES

SELECT NOMEPROJ FROM AULA0302.projeto WHERE NOMEPROJ LIKE 'P____'; -- 4 UNDERLINES

-- DIFERENÇA DE ASPAS
-- AS SIMPLES PEGAM STRINGS
-- AS DUPLAS SÃO PARA IDENTIFICAR O NOME DA TABELA, COLUNA, ETC...

SELECT E.NOME FROM AULA0302.EMPREGADO E WHERE E.NOME LIKE 'J%';
SELECT "nome" FROM AULA0302.EMPREGADO WHERE "nome" LIKE 'J%';

-- OPERADORES NA PROPRIA COLUNA
-- JA VOU CALCULAR O AUMENTO DE 10% NOS SALÁRIOS DOS FUNCIONÁRIOS
SELECT e.nome, e.SALARIO * 1.1 from AULA0302.empregado e;
-- COLOCAR NOME REFERENCIA OPERAÇÃO USANDO O AS
SELECT e.nome, e.SALARIO * 1.1 AS SalarioAtualizado from AULA0302.empregado e;

-- O USO DO DISTINTCT É PARA EVITAR DUPLICAÇÕES
-- SE HOUVER 2 LINHAS IGUAIS ELE RETORNA UMA
SELECT DISTINCT e.Nome, e.CPF FROM AULA0302.empregado e, AULA0302.trabalhaem t WHERE e.CPF = t.CPFE;

-- UTILIZAR UNION QUE É UNIÃO DE 2 CONSULTAS
-- 2. LISTAR OS NÚMEROS DE PROJETOS, NOS QUAIS ESTEJA ENCOLCIDO O EMPREGADO 'João da Silva'
-- COMO EMPREGADO OU COMO GERENTE RESPONSÁVEL PELO DEPARTAENTO QUE CONTROLA O PROJETO.

(SELECT DISTINCT p.NumProj FROM AULA0302.PROJETO p, AULA0302.DEPARTAMENTO d, AULA0302.EMPREGADO e WHERE p.NumD = d.NumDep and d.cpfger = e.cpf and e.nome = 'Joao') -- QUE ELE ESTÁ COMO GERENTE
UNION
(SELECT p.NumProj FROM AULA0302.PROJETO p, AULA0302.EMPREGADO e, AULA0302.TRABALHAEM t WHERE p.NumProj = t.NumProj and t.CPFE = e.cpf and e.Nome = 'Joao'); -- PROCURAR COMO APENAS CUM EMPREGADO

-- USO DO INTERSECT
-- LISTANDO OS NOME DOS EMPREGADOS QUE TAMBÉM SÃO GERENTES DE DEPARTAMENTO
SELECT e.nome FROM AULA0302.empregado e
INTERSECT
SELECT e.nome FROM AULA0302.EMPREGADO e, AULA0302.DEPARTAMENTO d WHERE d.CPFGer = e.CPF;

-- UTILIZAR O IS NULL, PARA IMPRMIR REGISTROS QUE TEM NULOS EM CERTA COLUNA
SELECT e.NOME FROM AULA0302.empregado e WHERE e.CPFSUPER IS NULL;
SELECT e.NOME FROM AULA0302.empregado e WHERE e.CPFSUPER IS NOT NULL; -- QUE NÃO TEM

-- FUNÇÕES QUE JÁ SÃO NATIVAS
-- MÉDIA DOS SALÁRIOS
SELECT AVG(salario) FROM AULA0302.EMPREGADO;
-- O MÁXIMO DOS SALÁRIOS DOS EMPREGADOS, OU QUE É O SALÁRIO MÁXIMO QUE ESTÁ NOS EMPREGADOS OU O MÍNIMO
SELECT MAX(salario) FROM AULA0302.EMPREGADO;
SELECT MIN(salario) FROM AULA0302.EMPREGADO;
-- A SOMA TOTAL DOS SALAÁRIOS DOS EMPREGADOS
SELECT SUM(salario) FROM AULA0302.EMPREGADO;


-- SELECIONAR O PCF DE TODOS OS EMPREGADOS QUE TRABALHAM NO MESMO
-- PROJETO E COM A MESMA QUANTIDADE DE HORAS QUE O EMPREGADO CUJO
-- CPF É 12345678911.

SELECT DISTINCT CPFe FROM AULA0302.TRABALHAEM  WHERE (NumProj, HORAS) in -- O in para verificar se o resultado está na subconsulta, então imprime o cpf
(SELECT NUMPROJ, HORAS FROM AULA0302.TRABALHAEM WHERE CPFE = '12345678911');

-- SELECIONAR O NOME DE TODOS OS EMPREGADOS QUE TEM SALÁRIO MAIOR DO QUE
-- TODOS O SALÁRIOS DOS EMPREGADOS DO DEPARTAMENTO 2

-- ALL é para verficar se o resultado é único

SELECT Nome FROM AULA0302.EMPREGADO WHERE salario > ALL (SELECT salario FROM AULA0302.EMPREGADO WHERE NumDep = 2);