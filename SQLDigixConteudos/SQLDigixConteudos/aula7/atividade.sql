CREATE TABLE IF NOT EXISTS au7.time (
id INTEGER PRIMARY KEY,
nome VARCHAR(50)
);
CREATE TABLE IF NOT EXISTS au7.partida (
id INTEGER PRIMARY KEY,
time_1 INTEGER,
time_2 INTEGER,
time_1_gols INTEGER,
time_2_gols INTEGER,
FOREIGN KEY(time_1) REFERENCES au7.time(id),
FOREIGN KEY(time_2) REFERENCES au7.time(id)
);
INSERT INTO au7.time(id, nome) VALUES
(1,'CORINTHIANS'),
(2,'SÃO PAULO'),
(3,'CRUZEIRO'),
(4,'ATLETICO MINEIRO'),
(5,'PALMEIRAS');
INSERT INTO au7.partida(id, time_1, time_2, time_1_gols, time_2_gols)
VALUES
(1,4,1,0,4),
(2,3,2,0,1),
(3,1,3,3,0),
(4,3,4,0,1),
(5,1,2,0,0),
(6,2,4,2,2),
(7,1,5,1,2),
(8,5,2,1,2);

SELECT NOME FROM au7.time;
SELECT * FROM au7.PARTIDA;


-- 1) Crie uma view "vpartida" que retorne a tabela de partida adicionando 
-- as colunas Time_da_Casa e Visitante com o nome dos times
-- drop view au7.vpartida;
CREATE OR REPLACE VIEW AU7.VPARTIDA AS
SELECT P.ID, T1.NOME AS Time_da_Casa, T2.NOME AS Visitante, P.time_1_gols AS Gols_da_casa, P.time_2_gols as Gols_visitante from AU7.partida P
JOIN AU7.TIME T1 ON T1.ID = P.time_1
JOIN AU7.TIME T2 ON T2.ID = P.time_2
ORDER BY P.id ASC;
SELECT * FROM AU7.vpartida;

-- 2) realize uma consulta em vpartida que retorne somente os jogos 
-- dos times que possuem nome que começam com A ou C participaram
SELECT VP.time_da_casa, VP.visitante from au7.vpartida VP WHERE 
    time_da_casa LIKE 'C%' OR time_da_casa like 'A%' OR
    visitante LIKE 'C%' OR visitante LIKE 'A%'
ORDER BY time_da_casa, visitante ASC;

-- 3) Crie uma view utilizando a vpartida que retorne uma coluna de classificação
-- com o nome do ganhador da partida, ou a palavra 'EMPATE' em caso de empate

CREATE OR REPLACE VIEW AU7.VPARTIDA_CLASSIFICAVAO AS
SELECT VP.ID, VP.TIME_DA_CASA, VP.VISITANTE, VP.GOLS_DA_CASA, VP.GOLS_VISITANTE,
    
    CASE 
        WHEN VP.GOLS_DA_CASA > VP.GOLS_VISITANTE THEN VP.TIME_DA_CASA
        WHEN VP.GOLS_DA_CASA < VP.GOLS_VISITANTE THEN VP.VISITANTE
    ELSE
        'EMPATE';
    END AS GANHADOR_DA_PARTIDA
FROM AU7.vpartida VP;

SELECT * FROM AU7.vpartida_classificavao;


-- 4) CRIE UMA VIEW VTIME QUE RETORNE A TABELA DE TIME ADICIONANDO AS COLUNAS PARTIDAS, VITÓRIAS,
-- DERROTAS, EMPATES E PONTOS.
-- COLUNAS ESPERADAS: ID, NOME, PARTIDAS, VITORIAS, DERROTAS, EMPATES, PONTOS
-- ORDENAÇÃO: PONTOS DESENTES

-- PROFESSOR'S ANSWER
CREATE OR REPLACE VIEW AU7.VTIME AS
SELECT T.ID, T.NOME,
-- PARTIDAS
(SELECT COUNT(TIME_1) FROM AU7.PARTIDA WHERE TIME_1 = T.ID) + 
(SELECT COUNT(TIME_2) FROM AU7.PARTIDA WHERE TIME_2 = T.ID) AS PARTIDAS,
-- VITORIAS
(SELECT SUM(CASE WHEN TIME_1_GOLS > TIME_2_GOLS THEN 1 ELSE 0 END) FROM AU7.PARTIDA WHERE TIME_1 = T.ID) +
(SELECT SUM(CASE WHEN TIME_2_GOLS > TIME_1_GOLS THEN 1 ELSE 0 END) FROM AU7.PARTIDA WHERE TIME_2 = T.ID) AS VITORIAS,
-- EMPATES
(SELECT SUM(CASE WHEN TIME_1_GOLS = TIME_2_GOLS THEN 1 ELSE 0 END) FROM AU7.PARTIDA WHERE TIME_1 = T.ID) +
(SELECT SUM(CASE WHEN TIME_2_GOLS = TIME_1_GOLS THEN 1 ELSE 0 END) FROM AU7.PARTIDA WHERE TIME_2 = T.ID) AS EMPATES,
-- DERROTAS
(SELECT SUM(CASE WHEN TIME_1_GOLS < TIME_2_GOLS THEN 1 ELSE 0 END) FROM AU7.PARTIDA WHERE TIME_1 = T.ID) +
(SELECT SUM(CASE WHEN TIME_2_GOLS < TIME_1_GOLS THEN 1 ELSE 0 END) FROM AU7.PARTIDA WHERE TIME_2 = T.ID) AS DERROTAS,
-- PONTOS
(SELECT SUM(CASE WHEN TIME_2_GOLS > TIME_1_GOLS THEN 3 WHEN TIME_2_GOLS = TIME_1_GOLS THEN 1 ELSE 0 END)
FROM AU7.PARTIDA WHERE TIME_2 = T.ID) +
(SELECT SUM(CASE WHEN TIME_2_GOLS < TIME_1_GOLS THEN 3 WHEN TIME_2_GOLS = TIME_1_GOLS THEN 1 ELSE 0 END)
FROM AU7.PARTIDA WHERE TIME_1 = T.ID) AS PONTOS
FROM AU7.TIME T
ORDER BY PONTOS DESC;

-- 5) REALIZE UMA CONSULTA NA VIEW VPARTIDAS_CLASSIFICACAO
SELECT * FROM AU7.vpartida_classificavao;

-- 6) APAGUE A VIEW VPARTIDA





    


